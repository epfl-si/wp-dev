#!/bin/sh
#

PHP_VERSION=8.2

. "$(dirname "$0")"/functions.sh

usage () {
    die <<"USAGE"

php-xdebug: Start an Xdebug session in the local WordPress `httpd` container.

Usage:

   php-xdebug start
   php-xdebug stop

Here is a suitable configuration for Visual Studio Code's `launch.json`:

  {
      "version": "0.2.0",
      "configurations": [
          {
              "name": "Listen for Xdebug",
              "type": "php",
              "request": "launch",
              "port": 9000,
              "pathMappings": {
                "/wp": "${workspaceRoot}/volumes/wp",
                "/wp/nginx-entrypoint": "${workspaceRoot}/wp-ops/docker/nginx"
              }
          }
      ]
  }

See https://gist.github.com/chadrien/c90927ec2d160ffea9c4
and also (if you use IntelliJ IDEA)
https://www.jetbrains.com/help/idea/configuring-xdebug.html

USAGE
}

myip () {
    $(dirname "$0")/myip "$@"
}

dockerexec="docker exec -i wp-php"
dockerexec_nginx="docker exec -i wp-nginx"

ensure_php_xdebug_installed () {
    if ! $dockerexec sh -c \
         'test -f /etc/php/'$PHP_VERSION'/mods-available/xdebug.ini';
    then
        $dockerexec apt update --allow-releaseinfo-change
        $dockerexec apt install php$PHP_VERSION-xdebug
    fi
}

set -e

case "$1" in
    start)
        ensure_php_xdebug_installed
        case "$(uname -s)" in
            # Linux is ok with the xdebug.discover_client_host mechanism
            Linux)
                $dockerexec sh -c \
                    'cat > /etc/php/'$PHP_VERSION'/fpm/conf.d/99-debug.ini' <<EOF
        xdebug.mode=debug
        xdebug.start_with_request=yes
        xdebug.discover_client_host=yes
EOF
            ;;
            # Darwin is not, so use the current ip strategy
            *)
                myip --ensure
                $dockerexec sh -c \
                    'cat > /etc/php/'$PHP_VERSION'/fpm/conf.d/99-debug.ini' <<EOF
        xdebug.mode=debug
        xdebug.start_with_request=yes
        xdebug.client_host=$(myip)
EOF
        esac
        $dockerexec_nginx sh -c 'grep -q "fastcgi_read_timeout 3600s;" /etc/nginx/template/wordpress_fastcgi.conf || echo "fastcgi_read_timeout 3600s;" >> /etc/nginx/template/wordpress_fastcgi.conf'
        $dockerexec_nginx sh -c 'grep -q "proxy_read_timeout 3600s;" /etc/nginx/template/wordpress_fastcgi.conf || echo "proxy_read_timeout 3600s;" >> /etc/nginx/template/wordpress_fastcgi.conf'
        ;;
    stop)
        $dockerexec sh -c \
            'rm -f /etc/php/'$PHP_VERSION'/fpm/conf.d/99-debug.ini'
        $dockerexec_nginx sh -c \
                    "sed -i -e '/fastcgi_read_timeout 3600s;/d' -e '/proxy_read_timeout 3600s;/d' /etc/nginx/nginx.conf"
        ;;
    *) usage ;;
esac

$dockerexec_nginx sh -c 'kill -HUP $(cat /tmp/nginx/nginx.pid)'
$dockerexec sh -c 'killall -HUP php-fpm'${PHP_VERSION}
